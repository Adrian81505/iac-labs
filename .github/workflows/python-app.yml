name: Apka Pythona

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    steps:
      - uses: actions/checkout@v3
      - name: Skonfiguruj Pythona 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Zainstaluj akcję Poetry
        uses: snok/install-poetry@v1.3.4
      - name: Załaduj zbuforowane venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Zbuduj aplikację
        run: poetry build
        working-directory: ./example-app

  install-dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --no-root

  lint: 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    needs: install-dependencies
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Run linting
      run: poetry run task lint

  code-formatting:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    needs: install-dependencies
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Run code formatter
      run: poetry run task formatter

  security-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    needs: install-dependencies
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry Action
      uses: snok/install-poetry@v1.3.4
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pypoetry
          .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Run security tests
      run: poetry run task security

  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ] # Dodane testy na Windows i Ubuntu
    needs:
      - lint
      - security-tests
      - code-formatting
      - install-dependencies
      - build # Dodany build jako wymaganie
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - uses: actions/checkout@v3
      - name: Skonfiguruj Pythona 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Zainstaluj akcję Poetry
        uses: snok/install-poetry@v1.3.4
      - name: Załaduj zbuforowane venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Uruchom testy jednostkowe
        run: poetry run pytest
